{"results": [{"node": {"raw_sql": "{{ config(\r\n    materialized='incremental'\r\n    , unique_key='LINE_ORDER_KEY' \r\n    ) \r\n}}\r\n\r\nSELECT L_ORDERKEY AS ORDER_KEY\r\n    , L_LINENUMBER AS LINE_NUMBER\r\n    , CONCAT(L_ORDERKEY, L_LINENUMBER) AS LINE_ORDER_KEY\r\n    , L_QUANTITY AS QUANTITY\r\n    , L_EXTENDEDPRICE AS EXTENDED_PRICE\r\n    , L_DISCOUNT AS LINE_DISCOUNT\r\n    , L_TAX AS LINE_TAX\r\n    , CASE L_RETURNFLAG\r\n        WHEN 'R' THEN 'Returned'\r\n        WHEN 'A' THEN 'Available for Return'\r\n        WHEN 'N' THEN 'Not Available for Return'\r\n      END AS LINE_RETURN_FLAG  \r\n    , L_SHIPDATE AS LINE_SHIP_DATE\r\n    , L_RECEIPTDATE AS LINE_RECEIPT_DATE\r\n    , L_COMMITDATE AS LINE_COMMITDATE\r\n    , L_RECEIPTDATE - L_SHIPDATE AS SHIP_RECEIPT_LAG\r\n    , L_PARTKEY AS LINE_PART_KEY\r\n    , L_SUPPKEY AS LINE_SUPPLIER_KEY \r\nFROM \"SNOWFLAKE_SAMPLE_DATA\".\"TPCH_SF1\".\"LINEITEM\" L\r\nLEFT JOIN \"SNOWFLAKE_SAMPLE_DATA\".\"TPCH_SF10\".\"PART\" P ON L.L_PARTKEY = P.P_PARTKEY\r\nLEFT JOIN {{ref('DimSupplier')}} S ON L.L_SUPPKEY = S.SUPPLIER_KEY\r\nLEFT JOIN \"SNOWFLAKE_SAMPLE_DATA\".\"TPCH_SF10\".\"ORDERS\" O ON L.L_ORDERKEY = O.O_ORDERKEY\r\nLEFT JOIN \"SNOWFLAKE_SAMPLE_DATA\".\"TPCH_SF10\".\"CUSTOMER\" C ON O.O_CUSTKEY = C.C_CUSTKEY\r\n\r\n{% if is_incremental() %}\r\n\r\n  -- this filter will only be applied on an incremental run\r\nWHERE L_RECEIPTDATE > (select max(LINE_RECEIPT_DATE ) from {{ this }})\r\n\r\n{% endif %}", "compiled": true, "database": "DBT_POC", "schema": "dbt_jkolpak", "fqn": ["dbtpoc", "FactLineItem"], "unique_id": "model.dbtpoc.FactLineItem", "package_name": "dbtpoc", "root_path": "C:\\Users\\jkolpak\\dbt-venv\\dbt-poc", "path": "FactLineItem.sql", "original_file_path": "models\\FactLineItem.sql", "name": "FactLineItem", "resource_type": "model", "alias": "FactLineItem", "checksum": {"name": "sha256", "checksum": "bda3900539254b9114277f5818c0be8a8789e587f7f17c7096061db804094899"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "transient": true, "unique_key": "LINE_ORDER_KEY"}, "tags": [], "refs": [["DimSupplier"]], "sources": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.dbtpoc.DimSupplier"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\run\\dbtpoc\\models\\FactLineItem.sql", "deferred": false, "compiled_sql": "\n\nSELECT L_ORDERKEY AS ORDER_KEY\n    , L_LINENUMBER AS LINE_NUMBER\n    , CONCAT(L_ORDERKEY, L_LINENUMBER) AS LINE_ORDER_KEY\n    , L_QUANTITY AS QUANTITY\n    , L_EXTENDEDPRICE AS EXTENDED_PRICE\n    , L_DISCOUNT AS LINE_DISCOUNT\n    , L_TAX AS LINE_TAX\n    , CASE L_RETURNFLAG\n        WHEN 'R' THEN 'Returned'\n        WHEN 'A' THEN 'Available for Return'\n        WHEN 'N' THEN 'Not Available for Return'\n      END AS LINE_RETURN_FLAG  \n    , L_SHIPDATE AS LINE_SHIP_DATE\n    , L_RECEIPTDATE AS LINE_RECEIPT_DATE\n    , L_COMMITDATE AS LINE_COMMITDATE\n    , L_RECEIPTDATE - L_SHIPDATE AS SHIP_RECEIPT_LAG\n    , L_PARTKEY AS LINE_PART_KEY\n    , L_SUPPKEY AS LINE_SUPPLIER_KEY \nFROM \"SNOWFLAKE_SAMPLE_DATA\".\"TPCH_SF1\".\"LINEITEM\" L\nLEFT JOIN \"SNOWFLAKE_SAMPLE_DATA\".\"TPCH_SF10\".\"PART\" P ON L.L_PARTKEY = P.P_PARTKEY\nLEFT JOIN DBT_POC.dbt_jkolpak.DimSupplier S ON L.L_SUPPKEY = S.SUPPLIER_KEY\nLEFT JOIN \"SNOWFLAKE_SAMPLE_DATA\".\"TPCH_SF10\".\"ORDERS\" O ON L.L_ORDERKEY = O.O_ORDERKEY\nLEFT JOIN \"SNOWFLAKE_SAMPLE_DATA\".\"TPCH_SF10\".\"CUSTOMER\" C ON O.O_CUSTKEY = C.C_CUSTKEY\n\n\n\n  -- this filter will only be applied on an incremental run\nWHERE L_RECEIPTDATE > (select max(LINE_RECEIPT_DATE ) from DBT_POC.dbt_jkolpak.FactLineItem)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nSELECT L_ORDERKEY AS ORDER_KEY\n    , L_LINENUMBER AS LINE_NUMBER\n    , CONCAT(L_ORDERKEY, L_LINENUMBER) AS LINE_ORDER_KEY\n    , L_QUANTITY AS QUANTITY\n    , L_EXTENDEDPRICE AS EXTENDED_PRICE\n    , L_DISCOUNT AS LINE_DISCOUNT\n    , L_TAX AS LINE_TAX\n    , CASE L_RETURNFLAG\n        WHEN 'R' THEN 'Returned'\n        WHEN 'A' THEN 'Available for Return'\n        WHEN 'N' THEN 'Not Available for Return'\n      END AS LINE_RETURN_FLAG  \n    , L_SHIPDATE AS LINE_SHIP_DATE\n    , L_RECEIPTDATE AS LINE_RECEIPT_DATE\n    , L_COMMITDATE AS LINE_COMMITDATE\n    , L_RECEIPTDATE - L_SHIPDATE AS SHIP_RECEIPT_LAG\n    , L_PARTKEY AS LINE_PART_KEY\n    , L_SUPPKEY AS LINE_SUPPLIER_KEY \nFROM \"SNOWFLAKE_SAMPLE_DATA\".\"TPCH_SF1\".\"LINEITEM\" L\nLEFT JOIN \"SNOWFLAKE_SAMPLE_DATA\".\"TPCH_SF10\".\"PART\" P ON L.L_PARTKEY = P.P_PARTKEY\nLEFT JOIN DBT_POC.dbt_jkolpak.DimSupplier S ON L.L_SUPPKEY = S.SUPPLIER_KEY\nLEFT JOIN \"SNOWFLAKE_SAMPLE_DATA\".\"TPCH_SF10\".\"ORDERS\" O ON L.L_ORDERKEY = O.O_ORDERKEY\nLEFT JOIN \"SNOWFLAKE_SAMPLE_DATA\".\"TPCH_SF10\".\"CUSTOMER\" C ON O.O_CUSTKEY = C.C_CUSTKEY\n\n\n\n  -- this filter will only be applied on an incremental run\nWHERE L_RECEIPTDATE > (select max(LINE_RECEIPT_DATE ) from DBT_POC.dbt_jkolpak.FactLineItem)\n\n"}, "error": null, "status": "SUCCESS 0", "execution_time": 4.459986448287964, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-18T02:24:45.574872Z", "completed_at": "2021-02-18T02:24:45.613145Z"}, {"name": "execute", "started_at": "2021-02-18T02:24:45.614144Z", "completed_at": "2021-02-18T02:24:49.658697Z"}], "fail": null, "warn": null, "skip": false}], "generated_at": "2021-02-18T02:24:51.624210Z", "elapsed_time": 10.457836151123047}